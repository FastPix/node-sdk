import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import {
  AccessPolicy,
  AccessPolicy$inboundSchema,
  AccessPolicy$outboundSchema,
} from "./accesspolicy.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  PolicyAction,
  PolicyAction$inboundSchema,
  PolicyAction$outboundSchema,
} from "./policyaction.js";

/**
 * Restrictions based on the originating domain of a request (e.g., whether requests from certain websites should be allowed or blocked).
 */
export type PlaybackIdDomains = {
  /**
   * Policy action type
   */
  defaultPolicy?: PolicyAction | undefined;
  /**
   * A list of domains that are explicitly allowed access.
   */
  allow?: Array<string> | undefined;
  /**
   * A list of domains that are explicitly blocked from accessing the resource.
   */
  deny?: Array<string> | undefined;
};

/**
 * Restrictions based on the user agent (which is typically a string sent by browsers or bots identifying themselves).
 */
export type PlaybackIdUserAgents = {
  /**
   * Policy action type
   */
  defaultPolicy?: PolicyAction | undefined;
  /**
   * A list of specific user agents that are allowed to access the resource.
   */
  allow?: Array<string> | undefined;
  /**
   * A list of specific user agents that are blocked.
   */
  deny?: Array<string> | undefined;
};

/**
 * Controls access based on domains and user agents. Defines a default policy (either "allow" or "deny") and provides lists for explicitly allowed or denied domains and user agents.
 */
export type PlaybackIdAccessRestrictions = {
  /**
   * Restrictions based on the originating domain of a request (e.g., whether requests from certain websites should be allowed or blocked).
   */
  domains?: PlaybackIdDomains | undefined;
  /**
   * Restrictions based on the user agent (which is typically a string sent by browsers or bots identifying themselves).
   */
  userAgents?: PlaybackIdUserAgents | undefined;
};

/**
 * A collection of Playback ID objects utilized for crafting HLS playback urls.
 */
export type PlaybackId = {
  /**
   * A unique identifier is generated by FastPix for the playbacks.
   */
  id?: string | undefined;
  /**
   * Access policy for media content
   */
  accessPolicy?: AccessPolicy | undefined;
  /**
   * Controls access based on domains and user agents. Defines a default policy (either "allow" or "deny") and provides lists for explicitly allowed or denied domains and user agents.
   */
  accessRestrictions?: PlaybackIdAccessRestrictions | undefined;
};

/** @internal */
export const PlaybackIdDomains$inboundSchema: z.ZodType<
  PlaybackIdDomains,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultPolicy: PolicyAction$inboundSchema.optional(),
  allow: z.array(z.string()).optional(),
  deny: z.array(z.string()).optional(),
});

/** @internal */
export type PlaybackIdDomains$Outbound = {
  defaultPolicy?: string | undefined;
  allow?: Array<string> | undefined;
  deny?: Array<string> | undefined;
};

/** @internal */
export const PlaybackIdDomains$outboundSchema: z.ZodType<
  PlaybackIdDomains$Outbound,
  z.ZodTypeDef,
  PlaybackIdDomains
> = z.object({
  defaultPolicy: PolicyAction$outboundSchema.optional(),
  allow: z.array(z.string()).optional(),
  deny: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlaybackIdDomains$ {
  /** @deprecated use `PlaybackIdDomains$inboundSchema` instead. */
  export const inboundSchema = PlaybackIdDomains$inboundSchema;
  /** @deprecated use `PlaybackIdDomains$outboundSchema` instead. */
  export const outboundSchema = PlaybackIdDomains$outboundSchema;
  /** @deprecated use `PlaybackIdDomains$Outbound` instead. */
  export type Outbound = PlaybackIdDomains$Outbound;
}

export function playbackIdDomainsToJSON(
  playbackIdDomains: PlaybackIdDomains,
): string {
  return JSON.stringify(
    PlaybackIdDomains$outboundSchema.parse(playbackIdDomains),
  );
}

export function playbackIdDomainsFromJSON(
  jsonString: string,
): SafeParseResult<PlaybackIdDomains, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlaybackIdDomains$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlaybackIdDomains' from JSON`,
  );
}

/** @internal */
export const PlaybackIdUserAgents$inboundSchema: z.ZodType<
  PlaybackIdUserAgents,
  z.ZodTypeDef,
  unknown
> = z.object({
  defaultPolicy: PolicyAction$inboundSchema.optional(),
  allow: z.array(z.string()).optional(),
  deny: z.array(z.string()).optional(),
});

/** @internal */
export type PlaybackIdUserAgents$Outbound = {
  defaultPolicy?: string | undefined;
  allow?: Array<string> | undefined;
  deny?: Array<string> | undefined;
};

/** @internal */
export const PlaybackIdUserAgents$outboundSchema: z.ZodType<
  PlaybackIdUserAgents$Outbound,
  z.ZodTypeDef,
  PlaybackIdUserAgents
> = z.object({
  defaultPolicy: PolicyAction$outboundSchema.optional(),
  allow: z.array(z.string()).optional(),
  deny: z.array(z.string()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlaybackIdUserAgents$ {
  /** @deprecated use `PlaybackIdUserAgents$inboundSchema` instead. */
  export const inboundSchema = PlaybackIdUserAgents$inboundSchema;
  /** @deprecated use `PlaybackIdUserAgents$outboundSchema` instead. */
  export const outboundSchema = PlaybackIdUserAgents$outboundSchema;
  /** @deprecated use `PlaybackIdUserAgents$Outbound` instead. */
  export type Outbound = PlaybackIdUserAgents$Outbound;
}

export function playbackIdUserAgentsToJSON(
  playbackIdUserAgents: PlaybackIdUserAgents,
): string {
  return JSON.stringify(
    PlaybackIdUserAgents$outboundSchema.parse(playbackIdUserAgents),
  );
}

export function playbackIdUserAgentsFromJSON(
  jsonString: string,
): SafeParseResult<PlaybackIdUserAgents, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlaybackIdUserAgents$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlaybackIdUserAgents' from JSON`,
  );
}

/** @internal */
export const PlaybackIdAccessRestrictions$inboundSchema: z.ZodType<
  PlaybackIdAccessRestrictions,
  z.ZodTypeDef,
  unknown
> = z.object({
  domains: z.lazy(() => PlaybackIdDomains$inboundSchema).optional(),
  userAgents: z.lazy(() => PlaybackIdUserAgents$inboundSchema).optional(),
});

/** @internal */
export type PlaybackIdAccessRestrictions$Outbound = {
  domains?: PlaybackIdDomains$Outbound | undefined;
  userAgents?: PlaybackIdUserAgents$Outbound | undefined;
};

/** @internal */
export const PlaybackIdAccessRestrictions$outboundSchema: z.ZodType<
  PlaybackIdAccessRestrictions$Outbound,
  z.ZodTypeDef,
  PlaybackIdAccessRestrictions
> = z.object({
  domains: z.lazy(() => PlaybackIdDomains$outboundSchema).optional(),
  userAgents: z.lazy(() => PlaybackIdUserAgents$outboundSchema).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlaybackIdAccessRestrictions$ {
  /** @deprecated use `PlaybackIdAccessRestrictions$inboundSchema` instead. */
  export const inboundSchema = PlaybackIdAccessRestrictions$inboundSchema;
  /** @deprecated use `PlaybackIdAccessRestrictions$outboundSchema` instead. */
  export const outboundSchema = PlaybackIdAccessRestrictions$outboundSchema;
  /** @deprecated use `PlaybackIdAccessRestrictions$Outbound` instead. */
  export type Outbound = PlaybackIdAccessRestrictions$Outbound;
}

export function playbackIdAccessRestrictionsToJSON(
  playbackIdAccessRestrictions: PlaybackIdAccessRestrictions,
): string {
  return JSON.stringify(
    PlaybackIdAccessRestrictions$outboundSchema.parse(
      playbackIdAccessRestrictions,
    ),
  );
}

export function playbackIdAccessRestrictionsFromJSON(
  jsonString: string,
): SafeParseResult<PlaybackIdAccessRestrictions, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlaybackIdAccessRestrictions$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlaybackIdAccessRestrictions' from JSON`,
  );
}

/** @internal */
export const PlaybackId$inboundSchema: z.ZodType<
  PlaybackId,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  accessPolicy: AccessPolicy$inboundSchema.optional(),
  accessRestrictions: z.lazy(() => PlaybackIdAccessRestrictions$inboundSchema)
    .optional(),
});

/** @internal */
export type PlaybackId$Outbound = {
  id?: string | undefined;
  accessPolicy?: string | undefined;
  accessRestrictions?: PlaybackIdAccessRestrictions$Outbound | undefined;
};

/** @internal */
export const PlaybackId$outboundSchema: z.ZodType<
  PlaybackId$Outbound,
  z.ZodTypeDef,
  PlaybackId
> = z.object({
  id: z.string().optional(),
  accessPolicy: AccessPolicy$outboundSchema.optional(),
  accessRestrictions: z.lazy(() => PlaybackIdAccessRestrictions$outboundSchema)
    .optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace PlaybackId$ {
  /** @deprecated use `PlaybackId$inboundSchema` instead. */
  export const inboundSchema = PlaybackId$inboundSchema;
  /** @deprecated use `PlaybackId$outboundSchema` instead. */
  export const outboundSchema = PlaybackId$outboundSchema;
  /** @deprecated use `PlaybackId$Outbound` instead. */
  export type Outbound = PlaybackId$Outbound;
}

export function playbackIdToJSON(playbackId: PlaybackId): string {
  return JSON.stringify(PlaybackId$outboundSchema.parse(playbackId));
}

export function playbackIdFromJSON(
  jsonString: string,
): SafeParseResult<PlaybackId, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => PlaybackId$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'PlaybackId' from JSON`,
  );
}
