import * as z from "zod";
import { remap as remap$ } from "../../lib/primitives.js";
import { safeParse } from "../../lib/schemas.js";
import { ClosedEnum } from "../../types/enums.js";
import { Result as SafeParseResult } from "../../types/fp.js";
import { SDKValidationError } from "../errors/sdkvalidationerror.js";
import * as models from "../index.js";

/**
 * This parameter specifies the time span between which the video views list should be retrieved by. You can provide either from and to unix epoch timestamps or time duration. The scope of duration is between 60 minutes to 30 days.
 *
 * @remarks
 */
export const ListVideoViewsTimespan = {
  Sixtyminutes: "60:minutes",
  Sixhours: "6:hours",
  TwentyFourhours: "24:hours",
  Threedays: "3:days",
  Sevendays: "7:days",
  Thirtydays: "30:days",
} as const;
/**
 * This parameter specifies the time span between which the video views list should be retrieved by. You can provide either from and to unix epoch timestamps or time duration. The scope of duration is between 60 minutes to 30 days.
 *
 * @remarks
 */
export type ListVideoViewsTimespan = ClosedEnum<typeof ListVideoViewsTimespan>;

/**
 * Pass the error code to filter the list of views. The possible values of error code can be fetched from list of errors end point.
 *
 * @remarks
 */
export type ErrorCode = string | number;

export type ListVideoViewsRequest = {
  /**
   * This parameter specifies the time span between which the video views list should be retrieved by. You can provide either from and to unix epoch timestamps or time duration. The scope of duration is between 60 minutes to 30 days.
   *
   * @remarks
   */
  timespan: ListVideoViewsTimespan;
  /**
   * Pass the dimensions and their corresponding values you want to filter the views by. For excluding the values in the filter we can pass '!' before the filter value. The list of filters can be obtained from list of dimensions endpoint.
   *
   * @remarks
   * Example Values : [ browser_name:Chrome , os_name:macOS , device_name:Galaxy ]
   */
  filterby?: string | undefined;
  /**
   * Pass the limit to display only the rows specified by the value.
   *
   * @remarks
   */
  limit?: number | undefined;
  /**
   * Pass the offset value to indicate the page number.
   *
   * @remarks
   */
  offset?: number | undefined;
  /**
   * Pass the viewer_id to filter the list of views. This value can be manually set during integration or generated by FastPix. When set manually it can be a string of aplha numeric values of any length.
   *
   * @remarks
   */
  viewerId?: string | undefined;
  /**
   * Pass the error code to filter the list of views. The possible values of error code can be fetched from list of errors end point.
   *
   * @remarks
   */
  errorCode?: string | number | null | undefined;
  /**
   * Pass this value to sort the view list by.
   *
   * @remarks
   */
  orderBy?: string | undefined;
  /**
   * The order direction to sort the view list by.
   *
   * @remarks
   */
  sortOrder?: string | undefined;
};

/**
 * Get the list of Views
 */
export type ListVideoViewsResponse = {
  /**
   * It demonstrates whether the request is successful or not.
   */
  success?: boolean | undefined;
  /**
   * Displays the result of the request.
   */
  data?: Array<models.ViewsList> | undefined;
  /**
   * Pagination organizes content into pages for better readability and navigation.
   */
  pagination?: models.DataPagination | undefined;
  /**
   * The timeframe from and to details displayed in the form of unix epoch timestamps.
   *
   * @remarks
   */
  timespan?: Array<number> | undefined;
};

/** @internal */
export const ListVideoViewsTimespan$inboundSchema: z.ZodNativeEnum<
  typeof ListVideoViewsTimespan
> = z.nativeEnum(ListVideoViewsTimespan);

/** @internal */
export const ListVideoViewsTimespan$outboundSchema: z.ZodNativeEnum<
  typeof ListVideoViewsTimespan
> = ListVideoViewsTimespan$inboundSchema;

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListVideoViewsTimespan$ {
  /** @deprecated use `ListVideoViewsTimespan$inboundSchema` instead. */
  export const inboundSchema = ListVideoViewsTimespan$inboundSchema;
  /** @deprecated use `ListVideoViewsTimespan$outboundSchema` instead. */
  export const outboundSchema = ListVideoViewsTimespan$outboundSchema;
}

/** @internal */
export const ErrorCode$inboundSchema: z.ZodType<
  ErrorCode,
  z.ZodTypeDef,
  unknown
> = z.union([z.string(), z.number().int()]);

/** @internal */
export type ErrorCode$Outbound = string | number;

/** @internal */
export const ErrorCode$outboundSchema: z.ZodType<
  ErrorCode$Outbound,
  z.ZodTypeDef,
  ErrorCode
> = z.union([z.string(), z.number().int()]);

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ErrorCode$ {
  /** @deprecated use `ErrorCode$inboundSchema` instead. */
  export const inboundSchema = ErrorCode$inboundSchema;
  /** @deprecated use `ErrorCode$outboundSchema` instead. */
  export const outboundSchema = ErrorCode$outboundSchema;
  /** @deprecated use `ErrorCode$Outbound` instead. */
  export type Outbound = ErrorCode$Outbound;
}

export function errorCodeToJSON(errorCode: ErrorCode): string {
  return JSON.stringify(ErrorCode$outboundSchema.parse(errorCode));
}

export function errorCodeFromJSON(
  jsonString: string,
): SafeParseResult<ErrorCode, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ErrorCode$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ErrorCode' from JSON`,
  );
}

/** @internal */
export const ListVideoViewsRequest$inboundSchema: z.ZodType<
  ListVideoViewsRequest,
  z.ZodTypeDef,
  unknown
> = z.object({
  "timespan[]": ListVideoViewsTimespan$inboundSchema,
  "filterby[]": z.string().optional(),
  limit: z.number().int().default(10),
  offset: z.number().int().default(1),
  viewerId: z.string().optional(),
  errorCode: z.nullable(z.union([z.string(), z.number().int()])).optional(),
  orderBy: z.string().default("view_end"),
  sortOrder: z.string().default("asc"),
}).transform((v) => {
  return remap$(v, {
    "timespan[]": "timespan",
    "filterby[]": "filterby",
  });
});

/** @internal */
export type ListVideoViewsRequest$Outbound = {
  "timespan[]": string;
  "filterby[]"?: string | undefined;
  limit: number;
  offset: number;
  viewerId?: string | undefined;
  errorCode?: string | number | null | undefined;
  orderBy: string;
  sortOrder: string;
};

/** @internal */
export const ListVideoViewsRequest$outboundSchema: z.ZodType<
  ListVideoViewsRequest$Outbound,
  z.ZodTypeDef,
  ListVideoViewsRequest
> = z.object({
  timespan: ListVideoViewsTimespan$outboundSchema,
  filterby: z.string().optional(),
  limit: z.number().int().default(10),
  offset: z.number().int().default(1),
  viewerId: z.string().optional(),
  errorCode: z.nullable(z.union([z.string(), z.number().int()])).optional(),
  orderBy: z.string().default("view_end"),
  sortOrder: z.string().default("asc"),
}).transform((v) => {
  return remap$(v, {
    timespan: "timespan[]",
    filterby: "filterby[]",
  });
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListVideoViewsRequest$ {
  /** @deprecated use `ListVideoViewsRequest$inboundSchema` instead. */
  export const inboundSchema = ListVideoViewsRequest$inboundSchema;
  /** @deprecated use `ListVideoViewsRequest$outboundSchema` instead. */
  export const outboundSchema = ListVideoViewsRequest$outboundSchema;
  /** @deprecated use `ListVideoViewsRequest$Outbound` instead. */
  export type Outbound = ListVideoViewsRequest$Outbound;
}

export function listVideoViewsRequestToJSON(
  listVideoViewsRequest: ListVideoViewsRequest,
): string {
  return JSON.stringify(
    ListVideoViewsRequest$outboundSchema.parse(listVideoViewsRequest),
  );
}

export function listVideoViewsRequestFromJSON(
  jsonString: string,
): SafeParseResult<ListVideoViewsRequest, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListVideoViewsRequest$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListVideoViewsRequest' from JSON`,
  );
}

/** @internal */
export const ListVideoViewsResponse$inboundSchema: z.ZodType<
  ListVideoViewsResponse,
  z.ZodTypeDef,
  unknown
> = z.object({
  success: z.boolean().optional(),
  data: z.array(models.ViewsList$inboundSchema).optional(),
  pagination: models.DataPagination$inboundSchema.optional(),
  timespan: z.array(z.number().int()).optional(),
});

/** @internal */
export type ListVideoViewsResponse$Outbound = {
  success?: boolean | undefined;
  data?: Array<models.ViewsList$Outbound> | undefined;
  pagination?: models.DataPagination$Outbound | undefined;
  timespan?: Array<number> | undefined;
};

/** @internal */
export const ListVideoViewsResponse$outboundSchema: z.ZodType<
  ListVideoViewsResponse$Outbound,
  z.ZodTypeDef,
  ListVideoViewsResponse
> = z.object({
  success: z.boolean().optional(),
  data: z.array(models.ViewsList$outboundSchema).optional(),
  pagination: models.DataPagination$outboundSchema.optional(),
  timespan: z.array(z.number().int()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace ListVideoViewsResponse$ {
  /** @deprecated use `ListVideoViewsResponse$inboundSchema` instead. */
  export const inboundSchema = ListVideoViewsResponse$inboundSchema;
  /** @deprecated use `ListVideoViewsResponse$outboundSchema` instead. */
  export const outboundSchema = ListVideoViewsResponse$outboundSchema;
  /** @deprecated use `ListVideoViewsResponse$Outbound` instead. */
  export type Outbound = ListVideoViewsResponse$Outbound;
}

export function listVideoViewsResponseToJSON(
  listVideoViewsResponse: ListVideoViewsResponse,
): string {
  return JSON.stringify(
    ListVideoViewsResponse$outboundSchema.parse(listVideoViewsResponse),
  );
}

export function listVideoViewsResponseFromJSON(
  jsonString: string,
): SafeParseResult<ListVideoViewsResponse, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => ListVideoViewsResponse$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'ListVideoViewsResponse' from JSON`,
  );
}
