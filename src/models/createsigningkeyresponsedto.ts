import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";

/**
 * Displays the result of the request.
 */
export type CreateSigningKeyResponseDTO = {
  /**
   * A unique identifier is generated by FastPix for the signing keys.
   */
  id?: string | undefined;
  /**
   * A private key is a byte encoded secret key used to create a signed JSON Web Token (JWT) for authentication.
   */
  privateKey?: string | undefined;
  /**
   * Time the media was generated, defined as a localDateTime (UTC Time).
   */
  createdAt?: Date | undefined;
};

/** @internal */
export const CreateSigningKeyResponseDTO$inboundSchema: z.ZodType<
  CreateSigningKeyResponseDTO,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  privateKey: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
});

/** @internal */
export type CreateSigningKeyResponseDTO$Outbound = {
  id?: string | undefined;
  privateKey?: string | undefined;
  createdAt?: string | undefined;
};

/** @internal */
export const CreateSigningKeyResponseDTO$outboundSchema: z.ZodType<
  CreateSigningKeyResponseDTO$Outbound,
  z.ZodTypeDef,
  CreateSigningKeyResponseDTO
> = z.object({
  id: z.string().optional(),
  privateKey: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace CreateSigningKeyResponseDTO$ {
  /** @deprecated use `CreateSigningKeyResponseDTO$inboundSchema` instead. */
  export const inboundSchema = CreateSigningKeyResponseDTO$inboundSchema;
  /** @deprecated use `CreateSigningKeyResponseDTO$outboundSchema` instead. */
  export const outboundSchema = CreateSigningKeyResponseDTO$outboundSchema;
  /** @deprecated use `CreateSigningKeyResponseDTO$Outbound` instead. */
  export type Outbound = CreateSigningKeyResponseDTO$Outbound;
}

export function createSigningKeyResponseDTOToJSON(
  createSigningKeyResponseDTO: CreateSigningKeyResponseDTO,
): string {
  return JSON.stringify(
    CreateSigningKeyResponseDTO$outboundSchema.parse(
      createSigningKeyResponseDTO,
    ),
  );
}

export function createSigningKeyResponseDTOFromJSON(
  jsonString: string,
): SafeParseResult<CreateSigningKeyResponseDTO, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => CreateSigningKeyResponseDTO$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'CreateSigningKeyResponseDTO' from JSON`,
  );
}
