import * as z from "zod";
import { safeParse } from "../lib/schemas.js";
import { Result as SafeParseResult } from "../types/fp.js";
import { SDKValidationError } from "./errors/sdkvalidationerror.js";
import {
  SigningKeyWorkspaceDTO,
  SigningKeyWorkspaceDTO$inboundSchema,
  SigningKeyWorkspaceDTO$Outbound,
  SigningKeyWorkspaceDTO$outboundSchema,
} from "./signingkeyworkspacedto.js";
import {
  SingingKeysPagination,
  SingingKeysPagination$inboundSchema,
  SingingKeysPagination$Outbound,
  SingingKeysPagination$outboundSchema,
} from "./singingkeyspagination.js";

export type GetAllSigningKeyResponseDTO = {
  /**
   * A unique identifier is generated by FastPix for the signing keys.
   */
  id?: string | undefined;
  /**
   * Time the media was generated, defined as a localDateTime (UTC Time).
   */
  createdAt?: Date | undefined;
  /**
   * It display a specific setup where all operations are conducted.
   */
  workspace?: Array<SigningKeyWorkspaceDTO> | undefined;
  /**
   * Pagination organizes content into pages for better readability and navigation.
   */
  pagination?: SingingKeysPagination | undefined;
};

/** @internal */
export const GetAllSigningKeyResponseDTO$inboundSchema: z.ZodType<
  GetAllSigningKeyResponseDTO,
  z.ZodTypeDef,
  unknown
> = z.object({
  id: z.string().optional(),
  createdAt: z.string().datetime({ offset: true }).transform(v => new Date(v))
    .optional(),
  workspace: z.array(SigningKeyWorkspaceDTO$inboundSchema).optional(),
  pagination: SingingKeysPagination$inboundSchema.optional(),
});

/** @internal */
export type GetAllSigningKeyResponseDTO$Outbound = {
  id?: string | undefined;
  createdAt?: string | undefined;
  workspace?: Array<SigningKeyWorkspaceDTO$Outbound> | undefined;
  pagination?: SingingKeysPagination$Outbound | undefined;
};

/** @internal */
export const GetAllSigningKeyResponseDTO$outboundSchema: z.ZodType<
  GetAllSigningKeyResponseDTO$Outbound,
  z.ZodTypeDef,
  GetAllSigningKeyResponseDTO
> = z.object({
  id: z.string().optional(),
  createdAt: z.date().transform(v => v.toISOString()).optional(),
  workspace: z.array(SigningKeyWorkspaceDTO$outboundSchema).optional(),
  pagination: SingingKeysPagination$outboundSchema.optional(),
});

/**
 * @internal
 * @deprecated This namespace will be removed in future versions. Use schemas and types that are exported directly from this module.
 */
export namespace GetAllSigningKeyResponseDTO$ {
  /** @deprecated use `GetAllSigningKeyResponseDTO$inboundSchema` instead. */
  export const inboundSchema = GetAllSigningKeyResponseDTO$inboundSchema;
  /** @deprecated use `GetAllSigningKeyResponseDTO$outboundSchema` instead. */
  export const outboundSchema = GetAllSigningKeyResponseDTO$outboundSchema;
  /** @deprecated use `GetAllSigningKeyResponseDTO$Outbound` instead. */
  export type Outbound = GetAllSigningKeyResponseDTO$Outbound;
}

export function getAllSigningKeyResponseDTOToJSON(
  getAllSigningKeyResponseDTO: GetAllSigningKeyResponseDTO,
): string {
  return JSON.stringify(
    GetAllSigningKeyResponseDTO$outboundSchema.parse(
      getAllSigningKeyResponseDTO,
    ),
  );
}

export function getAllSigningKeyResponseDTOFromJSON(
  jsonString: string,
): SafeParseResult<GetAllSigningKeyResponseDTO, SDKValidationError> {
  return safeParse(
    jsonString,
    (x) => GetAllSigningKeyResponseDTO$inboundSchema.parse(JSON.parse(x)),
    `Failed to parse 'GetAllSigningKeyResponseDTO' from JSON`,
  );
}
